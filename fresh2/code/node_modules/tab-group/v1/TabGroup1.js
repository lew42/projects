var View = require("view42/v1");
var Mod = require("mod42/v1a");
var is = require("util42/is");
require("./TabGroup1.less");

var Panel = Mod.extend({
	name: "Panel",
	initialize: function(){
		this.cbs = [];

		this.tab = this.tabGroup.Tab({
			name: this.name,
			panel: this
		});

		// add the view to the tabGroup.views element
		this.tabGroup.views.append_view(this.view, this.name);
		
		// add the tab to the tabGroup.tabs element
		this.tabGroup.tabs.append_view(this.tab, this.name);

		// add this to the tabGroup as a property
		if (this.tabGroup[this.name])
			console.warn("already has prop");
		else
			this.tabGroup[this.name] = this;

		// add this to the tabGroup as a panel
		this.tabGroup.panels.push(this);


		// if there's already an active panel, deactivate new ones
		if (this.tabGroup.active){
			this.deactivate();

		// if there's not yet an active panel, activate this one (usually the first)
		} else {
			this.activate();
		}
	},
	activate: function(){
		if (this.tabGroup.active)
			this.tabGroup.active.deactivate();

		this.exec();

		this.view.show();
		this.view.addClass("active");
		this.tab.addClass("active");
		this.tabGroup.active = this;
		return this;
	},
	deactivate: function(){
		this.view.removeClass("active");
		this.tab.removeClass("active");
		this.view.hide();
		return this;
	},
	then: function(cb){
		this.cbs.push(cb);
	},
	exec: function(){
		for (var i = 0; i < this.cbs.length; i++){
			this.cbs[i].call(this);
		}
	}
});

var Tab = View.extend({
	name: "Tab",
	render: function(){
		this.append(this.name).click(function(){
			this.panel.activate();
		}.bind(this));
	}
});

var TabGroup1 = module.exports = View.extend({
	name: "TabGroup",
	// log: true,
	Views: View.extend({
		name: "Views"
	}),
	Tabs: View.extend({
		name: "Tabs"
	}),
	Panel: Panel,
	Tab: Tab,
	set_vertical: function(bool){
		if (bool){
			this.addClass("vertical").removeClass("horizontal");
		}
	},
	render: function(){
		if (this.dark)
			this.addClass("dark");
	},
	prerender: function(){
		// this could go somewhere else, but has to go before .set
		this.panels = [];
		
		this.addClass("tabGroup1").addClass("horizontal")
			.addClass("tabGroup1c");

		// render these before .set, so we can auto append panels
		this.append({
			tabs: this.Tabs(),
			views: this.Views()
		});
	},
	_set_prop$: function(value, name){
		// prototypes don't have .el, but we still might want to add a prototype.subView
		if (this.el && (value instanceof View)){
			this.append_panel(value, name);
			// return true to indicate that we've handled this property
			return true;
		}

		// return false to do standard set procedure
		return false;
	},
	append_panel: function(view, name){
		return this.Panel({
			tabGroup: this,
			name: name || view.name,
			view: view
		});
	},
	make: function(n, depth){
		if (!is.def(depth))
			depth = 1;

		if (depth){	
			for (var i = 0; i < n; i++){
				this.append_panel((new this.constructor({dark: this.dark ? false : true })).make(n, depth - 1), "test"+(i+1));
			}
		}
		return this;
	}
});