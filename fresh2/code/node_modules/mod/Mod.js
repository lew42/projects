var Base = require("base42/v1");
var is = require("util42/is");

var set = require("set42/setfn1");


var lowerCaseFirstChar = function(str){
	return str[0].toLowerCase() + str.substring(1);
};

var Mod = module.exports = Base.extend({
	name: "Mod",
	createConstructor: function(o){
		var name = (o && o.name) || this.name + "Ext";
		o && delete o.name;
		eval("var " + name + ";");
		var constructor = eval("(" + name + " = function " + name + "(){\r\n\
		if (!(this instanceof " + name + "))\r\n\
			return new (" + name + ".bind.apply(" + name + ", [null].concat([].slice.call(arguments)) ));\r\n\
		this.instantiate.apply(this, arguments);\r\n\
	});");
		return constructor;
	},
	instantiate: function(){
		this.set.apply(this, arguments);
		this.initialize.apply(this, arguments);
	},
	initialize: function(){},
	set: set
}).assign({
	extend: function(o){
		// Base1.extend will assign all the args...
		// Ext = Base.extend.apply(this, arguments);
		var Ext = this.getConstructor(o);

		// Setup inheritance
		Ext.prototype = Object.create(this.prototype);
		Ext.prototype.constructor = Ext;
		// don't override .name if used differently
		if (this.prototype.name === lowerCaseFirstChar(this.name))
			Ext.prototype.name = lowerCaseFirstChar(Ext.name);

		// Set all arguments to the new prototype
		Ext.prototype.set.apply(Ext.prototype, arguments);

		return Ext;
	}
});